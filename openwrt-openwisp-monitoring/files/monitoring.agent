#!/bin/sh

VERSION=0 #default value of version
while [ -n "$1" ]; do
  case "$1" in
    --version|-v) export VERSION=1; break;;
    --url) export BASE_URL="$2"; shift;;
    --uuid) export UUID="$2"; shift;;
    --key) export KEY="$2"; shift;;
    --verify_ssl) export VERIFY_SSL="$2"; shift;;
    --interval) export INTERVAL="$2"; shift;;
    --monitored_interfaces) export MONITORED_INTERFACES="$2"; shift;;
    --verbose_mode) export verbose_mode="$2"; shift;;
    --required_memory) export REQUIRED_PERCENT="$2"; shift;;
    -*)
      echo "Invalid option: $1"
      exit 1
    ;;
    *) break;;
  esac
  shift;
done

if [ "$VERSION" -eq "1" ]; then
  VERSION=$(cat /etc/openwisp/monitoring/VERSION)
  echo "openwisp-monitoring $VERSION"
  exit 0
fi

VERIFY_SSL=${VERIFY_SSL:-0}
INTERVAL=${INTERVAL:-300}
MONITORED_INTERFACES=${MONITORED_INTERFACES:-*}
verbose_mode=${verbose_mode:-0}

if [ -z "$BASE_URL" ]; then
  logger -s "missing required --url option" \
         -t openwisp_monitoring \
         -p daemon.err
  exit 1
fi

if [ -z "$UUID" ]; then
  logger -s "missing required --uuid option" \
          -t openwisp_monitoring \
          -p daemon.err
  exit 1
fi

if [ -z "$KEY" ]; then
  logger -s "missing required --key option" \
         -t openwisp_monitoring \
         -p daemon.err
  exit 1
fi

# Remove double quotes from interfaces
MONITORED_INTERFACES=$(echo "$MONITORED_INTERFACES" | tr -d '"')

URL="$BASE_URL/api/v1/monitoring/device/$UUID/?key=$KEY"

CURL_COMMAND="curl -s -w "%{http_code}""
[ "$VERIFY_SSL" = "0" ] && CURL_COMMAND="$CURL_COMMAND -k"
[ "$verbose_mode" = "1" ] && CURL_COMMAND="$CURL_COMMAND -v"

TMP_DIR="/tmp/openwisp/monitoring"

check_available_memory(){
  total=$(ubus call system info | grep -m1 total | tr -cd 0-9)
  available=$(ubus call system info | grep available | tr -cd 0-9)
  required=$(echo - |awk -v percent="$REQUIRED_PERCENT" -v total="$total" '{printf("%.f",percent*total)}')

  if [ "$available" -ge "$required" ]; then
    echo "1"
  else
    [ "$verbose_mode" = "1" ] && logger -s "Not enough memory available" \
                                        -p daemon.err
    echo "0"
  fi
}

collect_data(){
  n=0
  [ "$verbose_mode" = "1" ] && logger -s "Collecting NetJSON Monitoring data" \
                                      -p daemon.info
  until [ "$n" -ge 5 ]
  do
    echo "$(/usr/sbin/netjson_monitoring "$MONITORED_INTERFACES")" && break
    
    if [ "$n" -eq 5 ]; then
      [ "$verbose_mode" = "1" ] && logger -s "Collecting data failed!" \
                                          -p daemon.err
    fi
    n=$((n+1))
    sleep 5
  done
}

save_data() {
  file_name="$(date +'%d-%m-%Y_%H:%M:%S').json"
  # make directory
  mkdir -p "$TMP_DIR"
  #save data with file_name
  echo "$data" > "$TMP_DIR/$file_name"
  [ "$verbose_mode" = "1" ] && logger -s "Data saved temporarily" \
                                      -p daemon.info
}

send_saved_data() {
  for file in "$TMP_DIR"/*.json
  do
    basefilename=${file##*/}
    filename=${basefilename%.*}
    url="$URL?date=$filename"
    data=$(cat "$basefilename")
    #send data
    response_code=$($CURL_COMMAND -H "Content-Type: application/json" \
      -d "$data" \
      -v "$url")
    if [ "$response_code" = "200" ]; then
      [ "$verbose_mode" = "1" ] && logger -s "Saved data sent successfully." \
                                          -p daemon.info
      #Removed saved data
      rm "$basefilename"
    else
      logger -s "Data not sent successfully. Response code is $response_code" \
             -t openwisp_monitoring \
             -p daemon.err

      [ "$verbose_mode" = "0" ] && logger -s "Run with verbose mode to find more." \
                                          -t openwisp_monitoring \
                                          -p daemon.err
      exit 1
    fi
  done
}

while true
do
  data="$(collect_data)"
  #send data
  response_code=$($CURL_COMMAND -H "Content-Type: application/json" \
    -d "$data" \
    -v "$URL")
  if [ "$response_code" = "200" ]; then
    [ "$verbose_mode" = "1" ] && logger -s "Data sent successfully." \
                                        -p daemon.info
    send_saved_data
  else
    logger -s "Data not sent successfully. Response code is $response_code" \
           -t openwisp_monitoring \
           -p daemon.err

    [ "$verbose_mode" = "0" ] && logger -s "Run with verbose mode to find more." \
                                        -t openwisp_monitoring \
                                        -p daemon.err
    memory_available="$(check_available_memory)"
    [ "$memory_available" != "0" ] && save_data
  fi
  sleep "$INTERVAL" & wait $!
done
